
<style media="screen">

      .gallery {
      width: 83%;
      margin-left: 15%;
      border-radius: 3px;
      overflow: hidden;
      }
      .img-c-java {
      width: 30%;
      height: 250px;
      float: left;
      position: relative;
      overflow: hidden;
      }
      .img-w-java {
      position: absolute;
      width: 100%;
      height: 100%;
      background-size: cover;
      background-position: center;
      cursor: pointer;
      transition: transform ease-in-out 300ms;
      }
      .img-w-java img {
      display: none;
      }
      .img-c-java {
      transition: width ease 400ms, height ease 350ms, left cubic-bezier(0.4, 0, 0.2, 1) 420ms, top cubic-bezier(0.4, 0, 0.2, 1) 420ms, filter ease-in 0.4s;
      filter: grayscale(0);
      /* animation: all 5s ease-in; */
      }
      .img-c-java:hover{
      transform: scale(1.08);
      filter: grayscale(1);
      /* animation: all 5s ease-in; */
      transition: transform cubic-bezier(0.4, 0, 0.2, 1) 450ms, filter ease 0.4s;
      }
      .img-w:hover{
      transform: scale(1.08);
      filter: grayscale(1);
      /* animation: all 5s ease-in; */
      transition: transform cubic-bezier(0.4, 0, 0.2, 1) 450ms, filter ease 0.4s;
      }
      .img-c-java.active {
      width: 100% !important;
      height: 600px !important;
      position: absolute;
      z-index: 2000;
      }
      .img-c-java.postactive {
      position: absolute;
      z-index: 2000;
      pointer-events: none;
      }
      .img-c-java.active.positioned {
      left: 0 !important;
      top: 0 !important;
      transition-delay: 50ms;
      }
      @@media only screen and (max-width: 400px) {
        .gallery {
        width: 200px !important;
        }
      }

      /* Ticker /////////////////////// */
      .simple-ticker {
      	position: relative;
        /* left: 4%; */
      	width: 100%;
        height: 80px !important;
      	padding: 10px;
      	/* border: 1px solid #ddd; */
      	overflow: hidden;
        }
      .comments-caro {
      		position: relative;
      		width: 100%;
            height: 80px !important;
      		margin: 0;
      		padding: 0;
      		list-style: none;
        }
      .comments-caro-elem   {
      			display: none;
      			width: 100%;
            height: 80px !important;
      			margin: 0;
      			padding: 0;
        }

      /* ///////////////////// Loader for upcoming participants ////////////////// */
/*
      #javaFeedbackReturn {
          fill: none;
          stroke: #86db68;
          stroke-width: 20px;
          stroke-dasharray: 253;
          stroke-dashoffset: 253;
          transform: rotate(-90deg);
          transform-origin: 50% 50%;
          transition: 20s ease-in-out;
      }

      .profile {
        float: left;
      } */
      .chart-java {
        margin: 1.5em auto;
        display: block;
        border: 0.8px solid #fff;
        box-shadow: 0 0 2px #666, 0 0 150px rgba(0,0,0,.2);
        background-color: rgba(50, 50, 50, 0.4);
      }

      .label-content {
        pointer-events: none;
        color: white;
      }

      /* ///////////////////////////////////////////////////////////////////////////////// */





</style>


<div id="myModal-java" class="modal shadow-lg rounded" style="background-size: cover !important; background-attachment: fixed; z-index: 100 !important;">
  <!-- <span class="close cursor" onclick="closeModal()" style="margin-top: 4%; position: fixed; margin-right: 4%">&times;</span> -->
  <div class="modal-content">
    <span class="close cursor" onclick="closeModalJava()" style="margin-top: 4%; position: fixed; margin-right: 1%">&times;</span>
    <div class="container">
      <div class="jumbotron" style="color: white; background-color: rgba(0, 0, 0, 0.4);">
        <div class="gallery">
          <div class="img-w-java">
            <img src="/images/previous-events/java-dev/1.jpg" alt="" /></div>
          <div class="img-w-java"><img src="/images/previous-events/java-dev/2.jpg" alt="" /></div>
          <div class="img-w-java"><img src="/images/previous-events/java-dev/3.jpg" alt="" /></div>
          <div class="img-w-java"><img src="/images/previous-events/java-dev/4.jpg" alt="" /></div>
          <div class="img-w-java"><img src="/images/previous-events/java-dev/5.jpg" alt="" /></div>
          <div class="img-w-java"><img src="/images/previous-events/java-dev/6.jpg" alt="" /></div>
          <!-- <div class="img-w"><img src="/images/previous-events/java-dev/1.jpg" alt="" /></div> -->
          <!-- <div class="img-w"><img src="/images/previous-events/java-dev/1.jpg" alt="" /></div> -->
          <!-- <div class="img-w"><img src="/images/previous-events/java-dev/1.jpg" alt="" /></div> -->
          <!-- <div class="img-w"><img src="/images/previous-events/java-dev/1.jpg" alt="" /></div> -->
        </div>
        <!-- ====================================================== SVG ============================================================ -->
        <div class="jumbotron" style="background-color: rgba(0, 0, 0, 0); color: white;">
          <p>
              <h4 class="display-4" style="text-align: center">Feedback by participants</h4>
          </p>
          <svg class="chart-java"></svg>
          <p style="margin-top: 10%;">
            <div class="row" style="width: 100%; margin-left: 0.5%;">
              <div class="col-lg-9">
                <div class="jumbotron rounded shadow-lg border" style="border-color: white; background-color: rgba(50, 50, 50, 0.6); border-width: 2px; width: 90%; text-align: center !important; padding: 1.5% !important;">
                  <h5 style="color: white;">Comments by the participants.</h5>
                  <hr style="width: 80%; border-color: white; opacity: 0.6">
                  <div class="simple-ticker" id="js-ticker-roll-java">
                    <ul class="comments-caro" style="height: 100px; width: 100%; color: white !important">
                      <li class="comments-caro-elem">
                        <h6>"Helpful for students from all years"</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                      <li class="comments-caro-elem">
                        <h6>"It was an amazing event and very much helpful."</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                      <li class="comments-caro-elem">
                        <h6>"Amazing event and superb enthusiasm."</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                      <li class="comments-caro-elem">
                        <h6>"Can you please arrange a separate session for NETBEANS in much detail?"</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                      <li class="comments-caro-elem">
                        <h6>"Keep a workshop on Android app development."</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                      <li class="comments-caro-elem">
                        <h6>"Most generous and effective efforts."</h6>
                        <span style="float: right; font-size: 1.15em;"></span>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
              <div class="col-lg-3" style=" color: white !important">
                <div class="javaFeedbackReturn container rounded shadow-lg border" style="border-color: white; background-color: rgba(50, 50, 50, 0.6); border-width: 2px; padding: 2px;">
                  <div class="container" id="javaFeedbackReturn">
                    <!-- //////////////////// Left blank intentionally for svg //////////////////////////// -->
                  </div>
                  <!-- <svg width="200px" height="200px" viewBox="0 0 100 100" style="color: white !important">
                    <circle id="javaFeedbackReturn" cx="50" cy="50" r="35"  style="color: white !important">
                    </circle>
                    <text x="50%" y="50%" text-anchor="middle" style="color: white !important"> <tspan style="color: white !important; fill: white !important">76%</tspan> </text>
                  </svg> -->
                  <p>
                    <h6 style="margin-left: 2px; text-align: justify;"> <span style="font-weight: bold;">76%</span> of the participants voted to attend following events by ACM</h6>
                  </p>
                </div>
              </div>
            </div>
          </p>
        </div>
      <!-- ================================================================ SVG ends ================================================================ -->
      </div>
    </div>
  </div>
</div>


<script type="text/javascript">

    $(function() {
    $(".img-w-java").each(function() {
      $(this).wrap("<div class='img-c-java'></div>")
      let imgSrc = $(this).find("img").attr("src");
       $(this).css('background-image', 'url(' + imgSrc + ')');
    });


  //   $(".img-c-java").click(function() {
  //     let w = $(this).outerWidth();
  //     let h = $(this).outerHeight();
  //     let x = $(this).offset().left;
  //     let y = $(this).offset().top;
  //
  //
  //     $(".active").not($(this)).remove();
  //     let copy = $(this).clone();
  //     copy.insertAfter($(this)).height(h).width(w).delay(500).addClass("active");
  //     $(".active").css('top', y - 8);
  //     $(".active").css('left', x - 8);
  //
  //       setTimeout(function() {
  //     copy.addClass("positioned");
  //   }, 0);
  //
  // });




  });
  //
  //   $(document).on("click", ".img-c-java.active", function() {
  //   let copy = $(this)
  //   copy.removeClass("positioned active").addClass("postactive")
  //   setTimeout(function() {
  //     copy.remove();
  //   }, 500)
  // });

    // =========================================== SVG =================================================== //

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////// Feedback web-dev javascript ////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    $(function () {

    	var margin = {
    		top: 10,
    		bottom: 10,
    		left: 10,
    		right: 10
    	};
    	var width = 600 - margin.left - margin.right,
    		height = 400 - margin.top - margin.bottom;

    	var labelsWidth = 600 * 0.25;
    	var labelWidth = labelsWidth * 0.2;
    	var labelHeight = labelWidth * 0.6;

    	var animateDuration = 300;
    	var outerRadius = width-labelsWidth < height? (width-labelsWidth)/2 : height/2;
    	var innerRadius = outerRadius * 0.4; // 40%

    	var arc = d3.svg.arc()
    		.innerRadius(innerRadius)
    		.outerRadius(outerRadius);

    	var pie = d3.layout
    		.pie()
    		.sort(null)
    		.value(getValue)
    		.startAngle(1.1*Math.PI)
    		.endAngle(3.1*Math.PI);

    	var color = d3.scale.category20();

    	var chart = d3.select('.chart-java')
    		.attr({
    			width: width + margin.left + margin.right,
    			height: height + margin.top + margin.bottom
    		})
    		.append('g')
    		.attr({
    			class: 'labels',
    			transform: 'translate(' + (width-(labelsWidth + margin.right)) + ', ' + margin.top + ')'
    		})
    		.select(getParent)
    		.append('g')
    		.attr({
    			class: 'pie',
    			transform: 'translate(' + (outerRadius + margin.left) + ', ' + (height/2 + margin.top) + ')'
    		})
    		.select(getParent)
    		.append('g')
    		.attr({
    			class: 'main-legend',
    			transform: 'translate(' + (outerRadius + margin.left) + ', ' + (outerRadius + margin.top) + ')'
    		})
    		.select(getParent);

    	chart.select('.main-legend')
    		.append('circle')
    		.attr({
    			class: 'border',
    			opacity: 0,
    			stroke: 'rgba(255,255,255,1)',
    			fill: 'rgba(0,0,0,0)',
    			r: innerRadius*0.64
    		})
    		.select(getParent)
    		.append('circle')
    		.attr({
    			class: 'circle',
    			opacity: 0,
    			fill: 'rgba(255,255,255,1)',
    			r: innerRadius*0.6
    		})
    		.select(getParent)
    		.append('line')
    		.attr({
    			opacity: 0,
    			stroke: 'rgba(255,255,255,1)',
    			x1: 0,
    			y1: 0,
    			x2: 0,
    			y2: 0
    		})
    		.select(getParent)
    		.append('text')
    		.attr({
    			class: 'legend-title',
    			'font-size': '18px',
    			y: -1 * innerRadius * 0.13,
    			'font-family': 'Arial',
    			'text-anchor': 'middle',
    			'alignment-baseline': 'middle',
    			fill: '#fff'
    		})
    		.select(getParent)
    		.append('text')
    		.attr({
    			class: 'description',
    			'font-size': '14px',
    			y: innerRadius * 0.13,
    			'font-family': 'Arial',
    			'text-anchor': 'middle',
    			'alignment-baseline': 'middle',
    			fill: '#fff'
    		})
        .select(getParent)
        .append('text')
        .attr({
          class: 'description-votes',
          'font-size': '14px',
          y: innerRadius * 0.13,
          'font-family': 'Arial',
          'text-anchor': 'middle',
          'alignment-baseline': 'middle',
          fill: '#fff'
        });

    	function getParent() {
    		return this.parentNode;
    	}

    	function getValue(d) {
    		return d.value;
    	}

    	function createArray(length) {
    		var data = new Array(length);
        data = [{name: "5/5 Rating", value:"64", votes:"42 votes"}, {name:"4/5 Rating", value:"29", votes:"19 votes"}, {name:"3/5 Rating", value:"7", votes:"4 votes"}];
    		return data;
    	}

    	function getSum(data) {
    		var _sum = 0;
    		data.forEach(function addValue(item) {
    			_sum += item.value;
    		});
    		return _sum;
    	}

    	function arcTween(d) {
    		var i;
    		function toArc(t) {
    			return arc(i(t));
    		}
    		function toEndAngle(t) {
    			d.endAngle = i(t);
    			return arc(d);
    		}

    		if ('undefined' === typeof this._current) {
    			i = d3.interpolate(d.startAngle+0.1, d.endAngle);
    			this._current = d;
    			return toEndAngle;
    		}
    		i = d3.interpolate(this._current, d);
    		this._current = i(0);
    		return toArc;
    	}

    	function labelAnimation(d) {
    		return 'translate (' + arc.centroid(d) + ')';
    	}

    	function fill(d, i) {
    		return color(i);
    	}

    	function selectArcAnimation(_d) {
    		var dist = outerRadius * 0.05;
    		_d.midAngle = ((_d.endAngle - _d.startAngle) / 2) + _d.startAngle;
    		var x = Math.sin(_d.midAngle) * dist;
    		var y = -Math.cos(_d.midAngle) * dist;
    		return 'translate(' + x + ',' + y + ')';
    	}

    	function updatePie(data) {
    		var sum = getSum(data);
    		data = pie(data);
    		var arcs = chart.select('.pie')
    			.selectAll('.arc')
    			.data(data);

    		var isDelay = arcs.selectAll('path').length;
    		var _duration = isDelay? animateDuration : animateDuration/2;

    		function getPercent(d) {
    			return (((d.value/sum)*100).toFixed(1) + '%');
    		}

    		function getLegend(d) {
    			return d.data.name + ' | ' +  d.data.votes;
    		}

    		function liveLarge(d) {
    			var angle = 360 * (d.value/sum);
    			var arcLength = (Math.PI * (outerRadius/2) * angle) / 180;
    			return arcLength > Math.PI*outerRadius*0.01;
    		}

    		function onMouseIn(d, i) {
    			var label = chart.selectAll('.legend')
    					.filter(function(_d, _i) {
    						return i===_i;
    					});
    			if (!label.attr('data-exit')) {
    				label.transition()
    					.duration(animateDuration/2)
    					.attr({
    						opacity: 1,
    						transform: 'translate(10, '+ ((labelHeight + 5) * i) +')'
    					});
    			}

    			chart.selectAll('.arc')
    				.filter(function(_d, _i) {
    					return i===_i;
    				})
    				.transition()
    				.duration(animateDuration/2)
    				.attr('transform', selectArcAnimation);

    			chart.select('.main-legend')
    				.select('.border')
    				.transition()
    				.duration(animateDuration/2)
    				.attr({
    					opacity: 1,
    					stroke: fill(null, i)
    				});

    			chart.select('.main-legend')
    				.select('.circle')
    				.transition()
    				.duration(animateDuration/2)
    				.attr({
    					opacity: 1,
    					fill: fill(null, i)
    				});

    			chart.select('.main-legend')
    				.select('line')
    				.transition()
    				.duration(animateDuration/2)
    				.attr({
    					opacity: 1,
    					stroke: fill(null, i),
    					x1: Math.sin(d.midAngle) * (innerRadius*0.7),
    					y1: -Math.cos(d.midAngle) * (innerRadius*0.7),
    					x2: Math.sin(d.midAngle) * innerRadius,
    					y2: -Math.cos(d.midAngle) * innerRadius
    				});

    			chart.select('.main-legend')
    				.select('.legend-title')
    				.text(d.data.name)
    				.select(getParent)
    				.select('.description')
    				.text(d.data.value)
            .select('.description-votes')
            .text(d.data.votes)
    		}
    		function onMouseOut(d, i) {
    			chart.select('.main-legend')
    					.selectAll(['.circle', '.border'])
    					.transition()
    					.duration(animateDuration/2)
    					.attr({
    						opacity: 0
    					});

    			chart.select('.main-legend')
    					.select('line')
    					.transition()
    					.duration(animateDuration/2)
    					.attr({
    						opacity: 0
    					});

    			chart.select('.main-legend')
    					.select('.legend-title')
    					.text('')
    					.select(getParent)
    					.select('.description')
    					.text('')
              .select('.description-votes')
    					.text('');

    			if ('undefined' === typeof i) {
    				return;
    			}
    			var label = chart.selectAll('.legend')
    				.filter(function(_d, _i) {
    					return i===_i;
    				});

    			if (!label.attr('data-exit')) {
    				label.transition()
    					.duration(animateDuration/2)
    					.attr({
    						opacity: 1,
    						transform: 'translate(0, '+ ((labelHeight + 5) * i) +')'
    					});
    			}

    			chart.selectAll('.arc')
    				.filter(function(_d, _i) {
    					return i===_i;
    				})
    				.transition()
    				.duration(animateDuration/2)
    				.attr({
    					transform: 'translate(0,0)'
    				});
    		}

    		onMouseOut();
    		// update Pie

    		arcs.enter()
    			.append('g')
    			.attr('class', 'arc')
    			.on('mouseenter', onMouseIn)
    			.on('mouseout', onMouseOut)
    			.append('path')
    			.attr({
    				fill: fill
    			})
    			.select(getParent)
    			.filter(liveLarge)
    			.append('text')
    			.attr({
    				'font-family': 'Arial',
    				'font-size': '14px',
    				fill: '#fff',
    				'text-anchor': 'middle'
    			});

    		arcs.select('path')
    			.transition()
    			.delay( function delayFn(d,i) {
    				return isDelay? 0 : _duration*i;
    			})
    			.duration(_duration)
    			.attrTween('d', arcTween);

    		arcs.select('text')
    			.text(getPercent + "%")
    			.transition()
    			.duration(animateDuration)
    			.attr({
    				class: 'label-content',
    				transform: labelAnimation
    			});

    		arcs.exit()
        	.on('mouseenter', null)
    			.on('mouseout', null)
          .remove();

    		// Update Legends

    		var legends = chart
    				.select('.labels')
    				.selectAll('.legend')
    				.data(data);

    		legends.enter()
    			.append('g')
    			.on('mouseenter', onMouseIn)
    			.on('mouseout', onMouseOut)
    			.attr('class', 'legend')
    			.append('rect')
    			.attr({
    				width: labelWidth,
    				height: labelHeight,
    				fill: fill
    			})
    			.select(getParent)
    			.append('text')
    			.attr({
    				'font-size': '14px',
    				'font-family': 'Arial',
    				fill: '#666',
    				x: labelWidth + 5,
    				y: labelHeight/2 + 5
    			})
    			.select(getParent)
    			.attr({
    				opacity: 0,
    				transform: function(d, i) {
    					return 'translate(15, ' + ((labelHeight + 5) * i) + ')';
    				}
    			})
    			.transition()
    			.duration(animateDuration)
    			.attr({
    				opacity: 1,
    				transform: function(d, i) {
    					return 'translate(0, ' + ((labelHeight + 5) * i) + ')';
    				}
    			});

    		legends.exit()
          .on('mouseenter', null)
    			.on('mouseout', null)
    			.attr('data-exit', true)
    			.transition()
    			.duration(animateDuration/2)
    			.attr({
    				opacity: 0,
    				transform: function(d, i) {
    					return 'translate(-15, ' + ((labelHeight + 5) * i) + ')';
    				}
    			})
    			.remove();

    		legends.select('text').text(getLegend);
    	}

    	function generatePie() {
    		var data = createArray(Math.ceil(Math.random() * 10));
    		//var data = [{name: 'test 1', value: 100}];
    		updatePie(data);
    		// setTimeout(generatePie, 10000);
    	}

    	generatePie();
    } ());

    // Ticker //////////////////////////////////////////////////////////////////

    (function($) {
    	$.simpleTicker = function(element, options) {
    		var defaults = {
    			speed : 700,
    			delay : 4000,
    			easing : 'swing',
    			effectType : 'fade'
    		}
    		var param = {
    			'ul' : '',
    			'li' : '',
    			'initList' : '',
    			'ulWidth' : '',
    			'liHeight' : '',
    			'tickerHook' : 'tickerHook',
    			'effect' : {}
    		}

    		var plugin = this;
    		plugin.settings = {}
    		var $element = $(element),
    			element = element;

    		plugin.init = function() {
    			plugin.settings = $.extend({}, defaults, options);
    			param.ul = element.children('ul');
    			param.li = element.find('li');
    			param.initList = element.find('li:first');
    			param.ulWidth = param.ul.width();
    			param.liHeight = param.li.height();

    			element.css({height:(param.liHeight)});
    			param.li.css({top:'0', left:'0', position:'absolute'});


    			switch (plugin.settings.effectType) {
    				case 'fade':
    					plugin.effect.fade();
    					break;
    				case 'roll':
    					plugin.effect.roll();
    					break;
    				case 'slide':
    					plugin.effect.slide();
    					break;
    			}
    			plugin.effect.exec();
    		}

    		plugin.effect = {};
    		plugin.effect.exec = function() {
    			param.initList.css(param.effect.init.css)
    				.animate(param.effect.init.animate,plugin.settings.speed,plugin.settings.easing)
    				.addClass(param.tickerHook);
    			setInterval(function(){
    				element.find('.' + param.tickerHook)
    					.animate(param.effect.start.animate,plugin.settings.speed,plugin.settings.easing)
    					.next()
    					.css(param.effect.next.css)
    					.animate(param.effect.next.animate,plugin.settings.speed,plugin.settings.easing)
    					.addClass(param.tickerHook)
    					.end()
    					.appendTo(param.ul)
    					.css(param.effect.end.css)
    					.removeClass(param.tickerHook);
    			}, plugin.settings.delay);
    		}

    		plugin.effect.fade = function() {
    			param.effect = {
    				'init' : {
    					'css' : {display:'block',opacity:'0'},
    					'animate' : {opacity:'1',zIndex:'98'}
    				},
    					'start' : {
    					'animate' : {opacity:'0'}
    				},
    				'next' : {
    					'css' : {display:'block',opacity:'0',zIndex:'99'},
    					'animate' : {opacity:'1'}
    				},
    				'end' : {
    					'css' : {display:'none',zIndex:'98'}
    				}
    			}
    		}

    		plugin.effect.roll = function() {
    			param.effect = {
    				'init' : {
    					'css' : {top:'3em',display:'block',opacity:'0'},
    					'animate' : {top:'0',opacity:'1',zIndex:'98'}
    				},
    				'start' : {
    					'animate' : {top:'-3em',opacity:'0'}
    				},
    				'next' : {
    					'css' : {top:'3em',display:'block',opacity:'0',zIndex:'99'},
    					'animate' : {top:'0',opacity:'1'}
    				},
    				'end' : {
    					'css' : {zIndex:'98'}
    				}
    			}
    		}

    		plugin.effect.slide = function() {
    			param.effect = {
    				'init' : {
    					'css' : {left:(200),display:'block',opacity:'0'},
    					'animate' : {left:'0',opacity:'1',zIndex:'98'}
    				},
    				'start' : {
    					'animate' : {left:(-(200)),opacity:'0'}
    				},
    				'next' : {
    					'css' : {left:(param.ulWidth),display:'block',opacity:'0',zIndex:'99'},
    					'animate' : {left:'0',opacity:'1'}
    				},
    				'end' : {
    					'css' : {zIndex:'98'}
    				}
    			}
    		}

    		plugin.init();
    	}

    	$.fn.simpleTicker = function(options) {
    		return this.each(function() {
    			if (undefined == $(this).data('simpleTicker')) {
    				var plugin = new $.simpleTiecker(this, options);
    				$(this).data('simpleTicker', plugin);
    			}
    		});
    	}
    })(jQuery);

    $(function(){
    	$.simpleTicker($('#js-ticker-fade'), {'effectType':'fade'});
    	$.simpleTicker($('#js-ticker-roll-java'), {'effectType':'roll'});
    	$.simpleTicker($('#js-ticker-slide'), {'effectType':'slide'});
    });

    // ///////////////////////////////////////// Loader for upcoming participants /////////////////////////////////////


    //////////////////////////////////////////////

    // // $('#feed-web-dev').click(
    //     // setTimeout(
    //       function percentage() {
    //         // Round percentage to nearest integer (removing the decimal place)
    //         var percentageRounded = Math.round(40);
    //
    //
    //         var circle = $('#javaFeedbackReturn');
    //         // var text = $('svg text tspan');
    //
    //         var radius = circle.attr('r');
    //         var circumference = Math.PI * (radius * 2);
    //
    //         circle.css({'stroke-dashoffset': ((100 - percentageRounded) / 100) * circumference});
    //         // text.text(percentageRounded + '%');
    //       }
    //       percentage();
    //       // }, 2000
    //   // );
    // // );

    var data = [49, 16];

    var w = 180,
        h = 180,
        r = Math.min(w, h) / 2,
       ir = r * 0.5,
       color = d3.scale.category20(),
       donut = d3.layout.pie().sort(null),
       arc = d3.svg.arc().innerRadius(ir).outerRadius(r);

    var svg = d3.select("#javaFeedbackReturn").append("svg:svg")
        .attr("width", w)
       .attr("height", h)
    .append("svg:g")
       .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")");

    var arcs = svg.selectAll("path")
        .data(donut(data))
    .enter().append("svg:path")
        .attr("fill", function(d, i) { return color(i); })
        .attr("d", arc);

</script>
